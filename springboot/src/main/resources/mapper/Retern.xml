<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.springboot.mapper.ReternMapper">
    <select id="countByADate" resultType="com.example.springboot.mapper.po.BorrowReternCountPO">
        select count(*) as count, date_format(aDate, "%Y-%m-%d") as date
        from reterns
        where
        <choose>
            <when test="range == 'week'">
                aDate >= date_sub(now(), interval 1 week)
            </when>
            <when test="range == 'month'">
                aDate >= date_sub(now(), interval 1 month)
            </when>
            <when test="range == 'month2'">
                aDate >= date_sub(now(), interval 2 month)
            </when>
            <when test="range == 'month3'">
                aDate >= date_sub(now(), interval 3 month)
            </when>
            <otherwise>
                aDate > now()
            </otherwise>
        </choose>
        group by date
    </select>

    <select id="selectByEmailAndISBN" resultType="com.example.springboot.entity.Retern">
        select *
        from reterns
        where email = #{ email } and isbn = #{ isbn }
    </select>

    <insert id="save">
        insert into reterns(isbn, email, cDate, bStatus, duration, rDate, aDate, id)
        values (#{ isbn }, #{ email }, #{ cDate }, #{ bStatus }, #{ duration }, #{ rDate }, #{ aDate }, #{ id })
    </insert>

    <delete id="deleteByEmailAndISBN">
        delete from reterns
        where email = #{ email } and isbn = #{ isbn }
    </delete>

    <select id="list" resultType="com.example.springboot.entity.Retern">
        select r.*, b.name, p.username, p.phone
        from reterns r, book b, person p
        where r.email = p.email and r.isbn = b.isbn
        order by cDate desc
    </select>

    <select id="listByCondition" resultType="com.example.springboot.entity.Retern">
        select r.*, b.name, p.username, p.phone, u.uid
        from reterns r, book b, person p, user u
        <where>
            r.email = p.email and r.isbn = b.isbn and r.email = u.email
            <if test="username != null and username != ''">
                and p.username like concat('%', #{ username }, '%')
            </if>
            <if test="isbn != null and isbn != ''">
                and r.isbn like concat('%', #{ isbn }, '%')
            </if>
            <if test="name != null and name != ''">
                and b.name like concat('%', #{ name }, '%')
            </if>
        </where>
        order by aDate desc
    </select>
</mapper>